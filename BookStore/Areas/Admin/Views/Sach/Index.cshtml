@model IEnumerable<BookStore.Models.Sach>

@{
	ViewData["Title"] = "Sản phẩm";
} 

@section Styles {
	<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" />
	<link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.2/css/buttons.bootstrap5.min.css" />
}

<div class="card">
<h5 class="card-header">@ViewData["Title"]</h5>
<div class="card-body">
		<div class="row mb-3">
			<div class="col-md-6">
				<p><a asp-action="Create" class="btn btn-success"><i class="fa-light fa-plus"></i> Thêm mới</a></p>
			</div>
			<div class="col-md-6 text-end">
				<div id="export-buttons"></div>
			</div>
		</div>
		<table id="datatable" class="table table-sm table-hover table-striped table-bordered mb-0">
		<thead>
			<tr>
				<th @Html.DisplayNameFor(model => model.ID)>ID </th>
				<th @Html.DisplayNameFor(model => model.AnhBia)> Ảnh bìa </th>
				<th @Html.DisplayNameFor(model => model.TheLoai.TenTheLoai)> Tên thể loại </th>
				<th @Html.DisplayNameFor(model => model.NhaSanXuat.TenNhaSanXuat)> Tên nhà xuất bản </th>
				<th @Html.DisplayNameFor(model => model.TenSach)> Tên sách </th>
				<th @Html.DisplayNameFor(model => model.TacGia.TenTacGia)> Tên Tác giả </th>
				@*<th @Html.DisplayNameFor(model => model.MoTa)> Mô tả </th>*@
				<th @Html.DisplayNameFor(model => model.SoLuong)> Số lượng </th>
				<th @Html.DisplayNameFor(model => model.DonGia)> Đơn giá </th>
				<th width="5%">Sửa</th>
				<th width="5%">Xóa</th>
			</tr>
		</thead>
		</table>
</div>
</div>

@section Scripts {
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.2/js/dataTables.buttons.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.bootstrap5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.html5.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
<script>
		var table = $('#datatable').DataTable({
			language: {
				processing: 'Đang xử lý...',
				lengthMenu: 'Hiển thị _MENU_ dòng',
				zeroRecords: 'Không tìm thấy dòng nào phù hợp',
				info: 'Đang xem _START_ đến _END_ trong tổng số _TOTAL_ dòng',
				infoEmpty: 'Đang xem 0 đến 0 trong tổng số 0 dòng',
				emptyTable: 'Không có dữ liệu',
				infoFiltered: '(được lọc từ _MAX_ dòng)',
				infoPostFix: '',
				search: 'Tìm kiếm:',
				paginate: {
					first: '<i class="fa-duotone fa-arrow-left-to-line"></i>',
					last: '<i class="fa-duotone fa-arrow-right-to-line"></i>',
					next: '<i class="fa-duotone fa-arrow-right"></i>',
					previous: '<i class="fa-duotone fa-arrow-left"></i>'
				},
				buttons: {
					excel: '<i class="fa-duotone fa-file-excel"></i> Xuất Excel',
					copy: '<i class="fa-duotone fa-clipboard"></i> Sao chép',
					copyTitle: 'Đã sao chép',
					copySuccess: {
						_: 'Đã sao chép %d dòng vào bộ nhớ tạm.',
						1: 'Đã sao chép 1 dòng vào bộ nhớ tạm.'
					}
				}
			},
			buttons: [{
				extend: 'excelHtml5',
				title: null,
				filename: 'DanhSachSanPham',
						action: exportAllReport
			}, {
				extend: 'copyHtml5',
				title: null,
						action: exportAllReport
			}],
			processing: true,
			serverSide: true,
			filter: true, // Hiển thị ô Tìm kiếm
			orderMulti: false, // Chỉ cho sắp xếp mỗi lần 1 cột
			ajax: {
				url: '@Url.Action("Index_LoadData", "Sach", new { area = "Admin" })', // Hàm lấy dữ liệu Index_LoadData() bên trong SanPhamController
				type: 'POST',
				datatype: 'json'
			},
			columnDefs: [
				{
					targets: [1, 8, 9],
					className: 'text-center' // Cột 1 (Hình ảnh), 8 (Sửa), 9(Xóa) canh giữa
				},
				{
					targets: [6, 7],
					className: 'text-end' // Cột 6 (Số lượng), 7(Đơn giá) canh phai
				}
			],
			columns: [
				{
					// Cột 0: STT
					data: null,
					name: null,
					sortable: true, // Không cho sắp xếp
					render: function (data, type, row, meta) {
						return meta.row + meta.settings._iDisplayStart + 1;
					}
				},
				{
					// Cột 1: Hình ảnh
					data: 'AnhBia',
					name: 'AnhBia',
					sortable: false, // Không cho sắp xếp
					render: function (data, type, row, meta) {
						return '<img src="/uploads/' + row.AnhBia + '" width = "60" class="img-thumbnail" />';
					}
				},
				{
					// Cột 2: Tên loại sản phẩm
					data: 'TenTheLoai',
					name: 'TenTheLoai'
				},
				{
					// Cột 3: Tên hãng sản xuất
					data: 'TenNhaSanXuat',
					name: 'TenNhaSanXuat'
				},
				{
					// Cột 4: Tên sản phẩm
					data: 'TenSach',
					name: 'TenSach'
				},
				{
					// Cột 5: Tên tác giả
					data: 'TenTacGia',
					name: 'TenTacGia'
				},
				{
					// Cột 6: Số lượng
					data: 'SoLuong',
					name: 'SoLuong',
					render: DataTable.render.number(null, null, 0)
				},
				{
					// Cột 7: Đơn giá
					data: 'DonGia',
					name: 'DonGia',
					render: DataTable.render.number(null, null, 0)
				},
				{
					// Cột 8: Sửa
					data: null,
					name:null,
					sortable: false, // Không cho sắp xếp
					render: function (data, type, row, meta) {
						return ' <a href="/Admin/Sach/Edit/' + row.ID + '"><i class="fa-light fa-pen-to-square"></i></a>';
					}
				},
				{
					// Cột 9: Xóa
					data: null,
					name: null,
					sortable: false, // Không cho sắp xếp
					render: function (data, type, row, meta) {
						return '<a href="/Admin/Sach/Delete/' + row.ID + '"><i class="fa-light fa-trash-can text-danger"></i></a>';
					}
				}
			],
			initComplete: function (settings, json) {
				table.buttons().container().appendTo('#export-buttons');
				$('#export-buttons .btn').removeClass('btn-secondary').addClass('btn-info');
				$('#datatable').wrap('<div class="table-responsive"></div>');
			}
		});

		function exportAllReport(e, dt, button, config) {
			var self = this;
			var oldStart = dt.settings()[0]._iDisplayStart;
			dt.one('preXhr', function (e, s, data) {
				// Just this once, load all data from the server...
				data.start = 0;
				data.length = 2147483647;
				dt.one('preDraw', function (e, settings) {
					// Call the original action function
					if (button[0].className.indexOf('buttons-copy') >= 0) {
						$.fn.dataTable.ext.buttons.copyHtml5.action.call(self, e, dt, button, config);
					} else if (button[0].className.indexOf('buttons-excel') >= 0) {
						$.fn.dataTable.ext.buttons.excelHtml5.available(dt, config) ?
							$.fn.dataTable.ext.buttons.excelHtml5.action.call(self, e, dt, button, config) :
							$.fn.dataTable.ext.buttons.excelFlash.action.call(self, e, dt, button, config);
					}
					dt.one('preXhr', function (e, s, data) {
						// DataTables thinks the first item displayed is index 0, but we're not drawing that.
						// Set the property to what it was before exporting.
						settings._iDisplayStart = oldStart;
						data.start = oldStart;
					});
					// Reload the grid with the original page. Otherwise, API functions like table.cell(this) don't work properly.
					setTimeout(dt.ajax.reload, 0);
					// Prevent rendering of the full data to the DOM
					return false;
				});
			});
			// Requery the server with the new one-time export settings
			dt.ajax.reload();
		}
</script>
}